= Test 2 =

* time to complete: 60 minutes
* no imports/external modules allowed! (also no re)
* post result to http://rafb.net/paste and post the URL to the paste via IM 


1. Write a stack calculator that accepts an iterator which yields statements to
   execute. Each operation only has two operands.
   Supported operations have to be: mul (a*b), sub (a-b), div (a/b), add (a+b),
   r (a**(1.0/b)), pow (a**b) and mod (a%b)
   example for input:
   {{{
   #!python
	 calculate(['push 3', 'push 2', 'add', 'push 1', 'add']) == 6
   }}}
2. Write a tokenizer that scans and tokenizes an algebraic expression (for the sake
   of simplicity ignore preceeding +- signs)
   example: 
   {{{
   #!python
	 list(tokenize('1+(2+3)')) == ['1', '+', '(', '2', '+', '3', ')']
   }}}
3. Write a parser that transforms this stream into a tree of python lists for
   paranthesis, ignore operator precedence handling.
   example: 
   {{{
   #!python
   parse(tokenize('1+(2+3)')) == ['1', '+', ['2', '+', '3']]
   }}}
4. Write a generator that visits this tree to generate a series of instructions for
   your stack calculator, Each operator has exactly two operands (parenthesis has
   been correctly used).
   example invocation of the whole thing:
   {{{
   #!python
	 calculate(visit(parse(tokenize('1+(2+3)')))) == 6
   }}}

5. The solution has to pass these tests (this is a helper, each section in the tests
   corresponds to one of the above four points)
{{{
#!python
def test():
    #calculator tests (1)
    assert calculate(['push 1', 'push 2', 'add']) == 3
    assert calculate(['push 2', 'push 100', 'root']) == 10.0
    assert calculate(['push 10', 'push 20', 'sub', 'push 5', 'add', 'push 5', 'push 100', 'mul', 'div']) == 33
  
    #tokenizer tests (2)
    assert list(tokenize('1+(2+3)')) == ['1', '+', '(', '2', '+', '3', ')']
    assert list(tokenize('100 r 10 % 5 ^ 1 - 10 *20+3')) == ['100', 'r', '10', '%', '5', '^', '1', '-', '10', '*', '20', '+', '3']
    assert list(tokenize('(1+2) * (3/4)')) == ['(', '1', '+', '2', ')', '*', '(', '3', '/', '4', ')']
  
    #parser tests (3)
    assert parse(tokenize('1+(2+3)')) == ['1', '+', ['2', '+', '3']]
    assert parse(tokenize('((1/2)*(2+(5r3)))-5')) == [[['1', '/', '2'], '*', ['2', '+', ['5', 'r', '3']]], '-', '5']
  
    #visit tests (4)
    assert list(visit(parse(tokenize('1+(2+3)')))) == ['push 3', 'push 2', 'add', 'push 1', 'add']
    assert list(visit(parse(tokenize('((1/2)*(3+(4r5)))-6')))) == ['push 6', 'push 5', 'push 4', 'root', 'push 3', 'add', 'push 2', 'push 1', 'div', 'mul', 'sub']
  
    #final tests
    assert calculate(visit(parse(tokenize('1+(2+3)')))) == 6
    assert abs(calculate(visit(parse(tokenize('((10*10) + (5*5)) r 2')))) - 11.1803398875) < 0.00001
    assert abs(calculate(visit(parse(tokenize('((1./2.)*(3.+(4.r5.)))-6.')))) + 3.84024604461) < 0.00001
}}}
