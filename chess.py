def draw_bitboard(bitboard, square=None):
	out = ""
	tmp = ""
	for r in range(0, 64):
		row = r / 8 + 1
		col = chr(97 + r % 8)
		if bitboard & (1 << r): tmp += "(%s%d)" % (col, row)
		elif square != None and square == r:  tmp += "[%s%d]" % (col, row)
		else: tmp += " %s%d " % (col, row)
		if col is 'h':
			out = tmp + "\n" + out
			tmp = ""
	print out


def draw_bitboards(bitboards):
	i = 0
	for m in bitboards:
		draw_bitboard(m, i)
		i += 1

coords = [
	"a1","b1","c1","d1","e1","f1","g1","h1",
	"a2","b2","c2","d2","e2","f2","g2","h2",
	"a3","b3","c3","d3","e3","f3","g3","h3",
	"a4","b4","c4","d4","e4","f4","g4","h4",
	"a5","b5","c5","d5","e5","f5","g5","h5",
	"a6","b6","c6","d6","e6","f6","g6","h6",
	"a7","b7","c7","d7","e7","f7","g7","h7",
	"a8","b8","c8","d8","e8","f8","g8","h8"]


class Board:
	def __init__(self):
		self.reset()

	def get_pieces(self, color, type):
		pass

	def get_piece(self, square):
		index = coords.index(square)
		if (self.white_pawns >> index) & 1:
			return ("white", "pawn", index)
		if (self.black_pawns >> index) & 1:
			return ("black", "pawn", index)
		if (self.white_knights >> index) & 1:
			return ("white", "knight", index)
		if (self.black_knights >> index) & 1:
			return ("black", "knight", index)
		if (self.white_bishops >> index) & 1:
			return ("white", "bishop", index)
		if (self.black_bishops >> index) & 1:
			return ("black", "bishop", index)
		if (self.white_rooks >> index) & 1:
			return ("white", "rook", index)
		if (self.black_rooks >> index) & 1:
			return ("black", "rook", index)
		if (self.white_queens >> index) & 1:
			return ("white", "queen", index)
		if (self.black_queens >> index) & 1:
			return ("black", "queen", index)
		if (self.white_king >> index) & 1:
			return ("white", "king", index)
		if (self.black_king >> index) & 1:
			return ("black", "king", index)

	def reset(self):
		self.white_pawns = 0x000000000400FB00 # 0x000000000000FF00
		#print "white_pawns"
		#draw_bitboard(self.white_pawns)
		self.black_pawns = 0x00BF000040000000 # 0x00FF000000000000
		#print "black_pawns"
		#draw_bitboard(self.black_pawns)
		self.white_knights = 0x0000000000000042
		#print "white_knights"
		#draw_bitboard(self.white_knights)
		self.black_knights = 0x4200000000000000
		#print "black_knights"
		#draw_bitboard(self.black_knights)
		self.white_bishops = 0x0000000000000024
		#print "white_bishops"
		#draw_bitboard(self.white_bishops)
		self.black_bishops = 0x2400000000000000
		#print "black_bishops"
		#draw_bitboard(self.black_bishops)
		self.white_rooks = 0x0000000010000001 #0x0000000000000081
		#print "white_rooks"
		#draw_bitboard(self.white_rooks)
		self.black_rooks = 0x8100000000000000
		#print "black_rooks"
		#draw_bitboard(self.black_rooks)
		self.white_queens = 0x0000000000000008
		#print "white_queens"
		#draw_bitboard(self.white_queens)
		self.black_queens = 0x0800000000000000
		#print "black_queens"
		#draw_bitboard(self.black_queens)
		self.white_king = 0x0000000000000010
		#print "white_king"
		#draw_bitboard(self.white_king)
		self.black_king = 0x1000000000000000
		#print "black_king"
		#draw_bitboard(self.black_king)
		self.__recalc_board()

	def __recalc_board(self):
		self.white = self.white_pawns | self.white_knights | \
					self.white_bishops | self.white_rooks | \
					self.white_queens | self.white_king
		self.black = self.black_pawns | self.black_knights | \
					self.black_bishops | self.black_rooks | \
					self.black_queens | self.black_king
		self.occupied = self.white | self.black

	def get_moves(self, square):
		(color, rank, index) = self.get_piece(square)
		if color == "white":
			enemy_and_empty = ~self.occupied ^ self.black
		else:
			enemy_and_empty = ~self.occupied ^ self.white
		if rank == "rook":
			return self.__rook_moves(index, enemy_and_empty)
		elif rank == "bishop":
			return self.__bishop_moves(index, enemy_and_empty)
		elif rank == "queen":
			return self.__rook_moves(index, enemy_and_empty) | self.__bishop_moves(index, enemy_and_empty)
		elif rank == "knight":
			return self.__knight_moves(index, enemy_and_empty)

	def __rook_moves(self, index, enemy_and_empty):
		return self.__moves_right(index, enemy_and_empty) | \
				self.__moves_left(index, enemy_and_empty) | \
				self.__moves_up(index, enemy_and_empty) | \
				self.__moves_down(index, enemy_and_empty)

	def __bishop_moves(self, index, enemy_and_empty):
		return self.__moves_ne(index, enemy_and_empty) | \
				self.__moves_sw(index, enemy_and_empty) | \
				self.__moves_se(index, enemy_and_empty) | \
				self.__moves_nw(index, enemy_and_empty)

	def __knight_moves(self, index, enemy_and_empty):
		return moves_knight[index] & enemy_and_empty

	def __moves_right(self, index, enemy_and_empty):
		blockers = moves_right[index] & self.occupied
		blocked_slide = (blockers<<1) | (blockers<<2) | (blockers<<3) | (blockers<<4) | (blockers<<5) | (blockers<<6)
		clean_blocked_moves = blocked_slide & moves_right[index]
		right_moves = ~clean_blocked_moves & (moves_right[index] & enemy_and_empty)
		return right_moves

	def __moves_left(self, index, enemy_and_empty):
		blockers = moves_left[index] & self.occupied
		blocked_slide = (blockers>>1) | (blockers>>2) | (blockers>>3) | (blockers>>4) | (blockers>>5) | (blockers>>6)
		clean_blocked_moves = blocked_slide & moves_left[index]
		left_moves = ~clean_blocked_moves & (moves_left[index] & enemy_and_empty)
		return left_moves

	def __moves_up(self, index, enemy_and_empty):
		blockers = moves_up[index] & self.occupied
		blocked_slide = (blockers<<8) | (blockers<<16) | (blockers<<24) | (blockers<<32) | (blockers<<40) | (blockers<<48)
		clean_blocked_moves = blocked_slide & moves_up[index]
		up_moves = ~clean_blocked_moves & (moves_up[index] & enemy_and_empty)
		return up_moves

	def __moves_down(self, index, enemy_and_empty):
		blockers = moves_down[index] & self.occupied
		blocked_slide = (blockers>>8) | (blockers>>16) | (blockers>>24) | (blockers>>32) | (blockers>>40) | (blockers>>48)
		clean_blocked_moves = blocked_slide & moves_down[index]
		down_moves = ~clean_blocked_moves & (moves_down[index] & enemy_and_empty)
		return down_moves

	def __moves_ne(self, index, enemy_and_empty):
		blockers = moves_ne[index] & self.occupied
		blocked_slide = (blockers<<9) | (blockers<<18) | (blockers<<27) | (blockers<<36) | (blockers<<45) | (blockers<<54)
		clean_blocked_moves = blocked_slide & moves_ne[index]
		moves = ~clean_blocked_moves & (moves_ne[index] & enemy_and_empty)
		return moves

	def __moves_sw(self, index, enemy_and_empty):
		blockers = moves_sw[index] & self.occupied
		blocked_slide = (blockers>>9) | (blockers>>18) | (blockers>>27) | (blockers>>36) | (blockers>>45) | (blockers>>54)
		clean_blocked_moves = blocked_slide & moves_sw[index]
		moves = ~clean_blocked_moves & (moves_sw[index] & enemy_and_empty)
		return moves

	def __moves_se(self, index, enemy_and_empty):
		blockers = moves_se[index] & self.occupied
		blocked_slide = (blockers<<7) | (blockers<<14) | (blockers<<21) | (blockers<<28) | (blockers<<35) | (blockers<<42)
		clean_blocked_moves = blocked_slide & moves_se[index]
		moves = ~clean_blocked_moves & (moves_se[index] & enemy_and_empty)
		return moves

	def __moves_nw(self, index, enemy_and_empty):
		blockers = moves_nw[index] & self.occupied
		blocked_slide = (blockers>>7) | (blockers>>14) | (blockers>>21) | (blockers>>28) | (blockers>>35) | (blockers>>42)
		clean_blocked_moves = blocked_slide & moves_nw[index]
		moves = ~clean_blocked_moves & (moves_nw[index] & enemy_and_empty)
		return moves



# basic moves bit-tables
moves_left = (
	0x0000000000000000, 0x0000000000000001, 0x0000000000000003, 0x0000000000000007,
	0x000000000000000F, 0x000000000000001F, 0x000000000000003F, 0x000000000000007F,
	0x0000000000000000, 0x0000000000000100, 0x0000000000000300, 0x0000000000000700,
	0x0000000000000F00, 0x0000000000001F00, 0x0000000000003F00, 0x0000000000007F00,
	0x0000000000000000, 0x0000000000010000, 0x0000000000030000, 0x0000000000070000,
	0x00000000000F0000, 0x00000000001F0000, 0x00000000003F0000, 0x00000000007F0000,
	0x0000000000000000, 0x0000000001000000, 0x0000000003000000, 0x0000000007000000,
	0x000000000F000000, 0x000000001F000000, 0x000000003F000000, 0x000000007F000000,
	0x0000000000000000, 0x0000000100000000, 0x0000000300000000, 0x0000000700000000,
	0x0000000F00000000, 0x0000001F00000000, 0x0000003F00000000, 0x0000007F00000000,
	0x0000000000000000, 0x0000010000000000, 0x0000030000000000, 0x0000070000000000,
	0x00000F0000000000, 0x00001F0000000000, 0x00003F0000000000, 0x00007F0000000000,
	0x0000000000000000, 0x0001000000000000, 0x0003000000000000, 0x0007000000000000,
	0x000F000000000000, 0x001F000000000000, 0x003F000000000000, 0x007F000000000000,
	0x0000000000000000, 0x0100000000000000, 0x0300000000000000, 0x0700000000000000,
	0x0F00000000000000, 0x1F00000000000000, 0x3F00000000000000, 0x7F00000000000000)

moves_right = (
	0x00000000000000FE, 0x00000000000000FC, 0x00000000000000F8, 0x00000000000000F0,
	0x00000000000000E0, 0x00000000000000C0, 0x0000000000000080, 0x0000000000000000,
	0x000000000000FE00, 0x000000000000FC00, 0x000000000000F800, 0x000000000000F000,
	0x000000000000E000, 0x000000000000C000, 0x0000000000008000, 0x0000000000000000,
	0x0000000000FE0000, 0x0000000000FC0000, 0x0000000000F80000, 0x0000000000F00000,
	0x0000000000E00000, 0x0000000000C00000, 0x0000000000800000, 0x0000000000000000,
	0x00000000FE000000, 0x00000000FC000000, 0x00000000F8000000, 0x00000000F0000000,
	0x00000000E0000000, 0x00000000C0000000, 0x0000000080000000, 0x0000000000000000,
	0x000000FE00000000, 0x000000FC00000000, 0x000000F800000000, 0x000000F000000000,
	0x000000E000000000, 0x000000C000000000, 0x0000008000000000, 0x0000000000000000,
	0x0000FE0000000000, 0x0000FC0000000000, 0x0000F80000000000, 0x0000F00000000000,
	0x0000E00000000000, 0x0000C00000000000, 0x0000800000000000, 0x0000000000000000,
	0x00FE000000000000, 0x00FC000000000000, 0x00F8000000000000, 0x00F0000000000000,
	0x00E0000000000000, 0x00C0000000000000, 0x0080000000000000, 0x0000000000000000,
	0xFE00000000000000, 0xFC00000000000000, 0xF800000000000000, 0xF000000000000000,
	0xE000000000000000, 0xC000000000000000, 0x8000000000000000, 0x0000000000000000)

moves_up = (
	0x0101010101010100, 0x0202020202020200, 0x0404040404040400, 0x0808080808080800,
	0x1010101010101000, 0x2020202020202000, 0x4040404040404000, 0x8080808080808000,
	0x0101010101010000, 0x0202020202020000, 0x0404040404040000, 0x0808080808080000,
	0x1010101010100000, 0x2020202020200000, 0x4040404040400000, 0x8080808080800000,
	0x0101010101000000, 0x0202020202000000, 0x0404040404000000, 0x0808080808000000,
	0x1010101010000000, 0x2020202020000000, 0x4040404040000000, 0x8080808080000000,
	0x0101010100000000, 0x0202020200000000, 0x0404040400000000, 0x0808080800000000,
	0x1010101000000000, 0x2020202000000000, 0x4040404000000000, 0x8080808000000000,
	0x0101010000000000, 0x0202020000000000, 0x0404040000000000, 0x0808080000000000,
	0x1010100000000000, 0x2020200000000000, 0x4040400000000000, 0x8080800000000000,
	0x0101000000000000, 0x0202000000000000, 0x0404000000000000, 0x0808000000000000,
	0x1010000000000000, 0x2020000000000000, 0x4040000000000000, 0x8080000000000000,
	0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000,
	0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000)

moves_down = (
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008,
	0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080,
	0x0000000000000101, 0x0000000000000202, 0x0000000000000404, 0x0000000000000808,
	0x0000000000001010, 0x0000000000002020, 0x0000000000004040, 0x0000000000008080,
	0x0000000000010101, 0x0000000000020202, 0x0000000000040404, 0x0000000000080808,
	0x0000000000101010, 0x0000000000202020, 0x0000000000404040, 0x0000000000808080,
	0x0000000001010101, 0x0000000002020202, 0x0000000004040404, 0x0000000008080808,
	0x0000000010101010, 0x0000000020202020, 0x0000000040404040, 0x0000000080808080,
	0x0000000101010101, 0x0000000202020202, 0x0000000404040404, 0x0000000808080808,
	0x0000001010101010, 0x0000002020202020, 0x0000004040404040, 0x0000008080808080,
	0x0000010101010101, 0x0000020202020202, 0x0000040404040404, 0x0000080808080808,
	0x0000101010101010, 0x0000202020202020, 0x0000404040404040, 0x0000808080808080,
	0x0001010101010101, 0x0002020202020202, 0x0004040404040404, 0x0008080808080808,
	0x0010101010101010, 0x0020202020202020, 0x0040404040404040, 0x0080808080808080)

moves_ne = (
	0x8040201008040200, 0x0080402010080400, 0x0000804020100800, 0x0000008040201000,
	0x0000000080402000, 0x0000000000804000, 0x0000000000008000, 0x0000000000000000,
	0x4020100804020000, 0x8040201008040000, 0x0080402010080000, 0x0000804020100000,
	0x0000008040200000, 0x0000000080400000, 0x0000000000800000, 0x0000000000000000,
	0x2010080402000000, 0x4020100804000000, 0x8040201008000000, 0x0080402010000000,
	0x0000804020000000, 0x0000008040000000, 0x0000000080000000, 0x0000000000000000,
	0x1008040200000000, 0x2010080400000000, 0x4020100800000000, 0x8040201000000000,
	0x0080402000000000, 0x0000804000000000, 0x0000008000000000, 0x0000000000000000,
	0x0804020000000000, 0x1008040000000000, 0x2010080000000000, 0x4020100000000000,
	0x8040200000000000, 0x0080400000000000, 0x0000800000000000, 0x0000000000000000,
	0x0402000000000000, 0x0804000000000000, 0x1008000000000000, 0x2010000000000000,
	0x4020000000000000, 0x8040000000000000, 0x0080000000000000, 0x0000000000000000,
	0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000,
	0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000)

moves_nw = (
	0x0000000000000000, 0x0000000000000100, 0x0000000000010200, 0x0000000001020400,
	0x0000000102040800, 0x0000010204081000, 0x0001020408102000, 0x0102040810204000,
	0x0000000000000000, 0x0000000000010000, 0x0000000001020000, 0x0000000102040000,
	0x0000010204080000, 0x0001020408100000, 0x0102040810200000, 0x0204081020400000,
	0x0000000000000000, 0x0000000001000000, 0x0000000102000000, 0x0000010204000000,
	0x0001020408000000, 0x0102040810000000, 0x0204081020000000, 0x0408102040000000,
	0x0000000000000000, 0x0000000100000000, 0x0000010200000000, 0x0001020400000000,
	0x0102040800000000, 0x0204081000000000, 0x0408102000000000, 0x0810204000000000,
	0x0000000000000000, 0x0000010000000000, 0x0001020000000000, 0x0102040000000000,
	0x0204080000000000, 0x0408100000000000, 0x0810200000000000, 0x1020400000000000,
	0x0000000000000000, 0x0001000000000000, 0x0102000000000000, 0x0201000000000000,
	0x0408000000000000, 0x0810000000000000, 0x1020000000000000, 0x2040000000000000,
	0x0000000000000000, 0x0100000000000000, 0x0200000000000000, 0x0400000000000000,
	0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000)

moves_sw = (
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000004,
	0x0000000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040,
	0x0000000000000000, 0x0000000000000100, 0x0000000000000201, 0x0000000000000402,
	0x0000000000000804, 0x0000000000001008, 0x0000000000002010, 0x0000000000004020,
	0x0000000000000000, 0x0000000000010000, 0x0000000000020100, 0x0000000000040201,
	0x0000000000080402, 0x0000000000100804, 0x0000000000201008, 0x0000000000402010,
	0x0000000001010101, 0x0000000001000000, 0x0000000002010000, 0x0000000004020100,
	0x0000000008040201, 0x0000000010080402, 0x0000000020100804, 0x0000000040201008,
	0x0000000000000000, 0x0000000100000000, 0x0000000201000000, 0x0000000402010000,
	0x0000000804020100, 0x0000001008040201, 0x0000002010080402, 0x0000004020100804,
	0x0000000000000000, 0x0000010000000000, 0x0000020100000000, 0x0000040201000000,
	0x0000080402010000, 0x0000100804020100, 0x0000201008040201, 0x0000402010080402,
	0x0000000000000000, 0x0001000000000000, 0x0002010000000000, 0x0004020100000000,
	0x0008040201000000, 0x0010080402010000, 0x0020100804020100, 0x0040201008040201)

moves_se = (
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010,
	0x0000000000000020, 0x0000000000000040, 0x0000000000000080, 0x0000000000000000,
	0x0000000000000204, 0x0000000000000408, 0x0000000000000810, 0x0000000000001020,
	0x0000000000002040, 0x0000000000004080, 0x0000000000008000, 0x0000000000000000,
	0x0000000000020408, 0x0000000000040810, 0x0000000000081020, 0x0000000000102040,
	0x0000000000204080, 0x0000000000408000, 0x0000000000800000, 0x0000000000000000,
	0x0000000002040810, 0x0000000004081020, 0x0000000008102040, 0x0000000010204080,
	0x0000000020408000, 0x0000000040800000, 0x0000000080000000, 0x0000000000000000,
	0x0000000204081020, 0x0000000408102040, 0x0000000810204080, 0x0000001020408000,
	0x0000002040800000, 0x0000004080000000, 0x0000008000000000, 0x0000000000000000,
	0x0000020408102040, 0x0000040810204080, 0x0000081020408000, 0x0000102040800000,
	0x0000204080000000, 0x0000408000000000, 0x0000800000000000, 0x0000000000000000,
	0x0002040810204080, 0x0004081020408000, 0x0008102040800000, 0x0010204080000000,
	0x0020408000000000, 0x0040800000000000, 0x0080000000000000, 0x0000000000000000)

moves_knight = (
	0x0000000000020400, 0x0000000000050800, 0x00000000000A1100, 0x0000000000142200,
	0x0000000000284400, 0x0000000000508800, 0x0000000000A01000, 0x0000000000402000,
	0x0000000002040004, 0x0000000005080008, 0x000000000A110011, 0x0000000014220022,
	0x0000000028440044, 0x0000000050880088, 0x00000000A0100010, 0x0000000040200020,
	0x0000000204000402, 0x0000000508000805, 0x0000000A1100110A, 0x0000001422002214,
	0x0000002844004428, 0x0000005088008850, 0x000000A0100010A0, 0x0000004020002040,
	0x0000020400040200, 0x0000050800080500, 0x00000A1100110A00, 0x0000142200221400,
	0x0000284400442800, 0x0000508800885000, 0x0000A0100010A000, 0x0000402000204000,
	0x0002040004020000, 0x0005080008050000, 0x000A1100110A0000, 0x0014220022140000,
	0x0028440044280000, 0x0050880088500000, 0x00A0100010A00000, 0x0040200020400000,
	0x0204000402000000, 0x0508000805000000, 0x0A1100110A000000, 0x1422002214000000,
	0x2844004428000000, 0x5088008850000000, 0xA0100010A0000000, 0x4020002040000000,
	0x0400040200000000, 0x0800080500000000, 0x1100110A00000000, 0x2200221400000000,
	0x4400442800000000, 0x8800885000000000, 0x100010A000000000, 0x2000204000000000,
	0x0004020000000000, 0x0008050000000000, 0x00110A0000000000, 0x0022140000000000,
	0x0044280000000000, 0x0088500000000000, 0x0010A00000000000, 0x0020400000000000)


def test():
	board = Board() # new game, white turn
	# move white pawn e2 - e4
	board.move("e2", "e4")
	# move black pawn e7 - e5
	board.move("e7", "e5")
	# error exampes
	board.get_moves("e7") # e7 empty - throw
	# queen
	board.move("d1", "d5") # invalid move - throw
	# etc...

if __name__ == '__main__':
	board = Board() # new game, white turn

	(color, rank, index) = board.get_piece("d1")
	print "d1", color, rank
	draw_bitboard(board.get_moves("d1"), index)
	#draw_bitboards(Piece.moves_left)
	#draw_bitboards(Piece.moves_right)
	#draw_bitboards(Piece.moves_up)
	#draw_bitboards(Piece.moves_down)
	#draw_bitboards(Piece.moves_ne)
	#draw_bitboards(Piece.moves_nw)
	#draw_bitboards(Piece.moves_sw)
	#draw_bitboards(Piece.moves_se)
	#draw_bitboards(Piece.moves_knight)
